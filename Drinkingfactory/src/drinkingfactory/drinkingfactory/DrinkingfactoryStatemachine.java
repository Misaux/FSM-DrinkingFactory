/** Generated by YAKINDU Statechart Tools code generator. */
package drinkingfactory.drinkingfactory;

import drinkingfactory.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DrinkingfactoryStatemachine implements IDrinkingfactoryStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean drinkSelected;
		
		
		public void raiseDrinkSelected() {
			synchronized(DrinkingfactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							drinkSelected = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean addMoney;
		
		
		public void raiseAddMoney() {
			synchronized(DrinkingfactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							addMoney = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean paying;
		
		
		public void raisePaying() {
			synchronized(DrinkingfactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							paying = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean paymentValidate;
		
		
		public void raisePaymentValidate() {
			synchronized(DrinkingfactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							paymentValidate = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean resetMachine;
		
		
		public void raiseResetMachine() {
			synchronized(DrinkingfactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							resetMachine = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean userAction;
		
		
		public void raiseUserAction() {
			synchronized(DrinkingfactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							userAction = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cupGrabbed;
		
		
		public void raiseCupGrabbed() {
			synchronized(DrinkingfactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cupGrabbed = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean heatReached;
		
		
		public void raiseHeatReached() {
			synchronized(DrinkingfactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							heatReached = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cupFilled;
		
		
		public void raiseCupFilled() {
			synchronized(DrinkingfactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cupFilled = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean doResetMoney;
		
		
		public boolean isRaisedDoResetMoney() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return doResetMoney;
			}
		}
		
		protected void raiseDoResetMoney() {
			synchronized(DrinkingfactoryStatemachine.this) {
				doResetMoney = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetMoneyRaised();
				}
			}
		}
		
		private boolean doResetDrinkSetting;
		
		
		public boolean isRaisedDoResetDrinkSetting() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return doResetDrinkSetting;
			}
		}
		
		protected void raiseDoResetDrinkSetting() {
			synchronized(DrinkingfactoryStatemachine.this) {
				doResetDrinkSetting = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetDrinkSettingRaised();
				}
			}
		}
		
		private boolean doResetMachine;
		
		
		public boolean isRaisedDoResetMachine() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return doResetMachine;
			}
		}
		
		protected void raiseDoResetMachine() {
			synchronized(DrinkingfactoryStatemachine.this) {
				doResetMachine = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetMachineRaised();
				}
			}
		}
		
		private boolean doCleaning;
		
		
		public boolean isRaisedDoCleaning() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return doCleaning;
			}
		}
		
		protected void raiseDoCleaning() {
			synchronized(DrinkingfactoryStatemachine.this) {
				doCleaning = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCleaningRaised();
				}
			}
		}
		
		private boolean grindBeans;
		
		
		public boolean isRaisedGrindBeans() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return grindBeans;
			}
		}
		
		protected void raiseGrindBeans() {
			synchronized(DrinkingfactoryStatemachine.this) {
				grindBeans = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGrindBeansRaised();
				}
			}
		}
		
		private boolean takeTeaBag;
		
		
		public boolean isRaisedTakeTeaBag() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return takeTeaBag;
			}
		}
		
		protected void raiseTakeTeaBag() {
			synchronized(DrinkingfactoryStatemachine.this) {
				takeTeaBag = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTakeTeaBagRaised();
				}
			}
		}
		
		private boolean takeOffTeaBag;
		
		
		public boolean isRaisedTakeOffTeaBag() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return takeOffTeaBag;
			}
		}
		
		protected void raiseTakeOffTeaBag() {
			synchronized(DrinkingfactoryStatemachine.this) {
				takeOffTeaBag = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTakeOffTeaBagRaised();
				}
			}
		}
		
		private boolean takeCoffeePod;
		
		
		public boolean isRaisedTakeCoffeePod() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return takeCoffeePod;
			}
		}
		
		protected void raiseTakeCoffeePod() {
			synchronized(DrinkingfactoryStatemachine.this) {
				takeCoffeePod = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTakeCoffeePodRaised();
				}
			}
		}
		
		private boolean heatWater;
		
		
		public boolean isRaisedHeatWater() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return heatWater;
			}
		}
		
		protected void raiseHeatWater() {
			synchronized(DrinkingfactoryStatemachine.this) {
				heatWater = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onHeatWaterRaised();
				}
			}
		}
		
		private boolean putCup;
		
		
		public boolean isRaisedPutCup() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return putCup;
			}
		}
		
		protected void raisePutCup() {
			synchronized(DrinkingfactoryStatemachine.this) {
				putCup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPutCupRaised();
				}
			}
		}
		
		private boolean addSugar;
		
		
		public boolean isRaisedAddSugar() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return addSugar;
			}
		}
		
		protected void raiseAddSugar() {
			synchronized(DrinkingfactoryStatemachine.this) {
				addSugar = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onAddSugarRaised();
				}
			}
		}
		
		private boolean pourWater;
		
		
		public boolean isRaisedPourWater() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return pourWater;
			}
		}
		
		protected void raisePourWater() {
			synchronized(DrinkingfactoryStatemachine.this) {
				pourWater = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPourWaterRaised();
				}
			}
		}
		
		private boolean getDrink;
		
		
		public boolean isRaisedGetDrink() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return getDrink;
			}
		}
		
		protected void raiseGetDrink() {
			synchronized(DrinkingfactoryStatemachine.this) {
				getDrink = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGetDrinkRaised();
				}
			}
		}
		
		private boolean putBeans;
		
		
		public boolean isRaisedPutBeans() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return putBeans;
			}
		}
		
		protected void raisePutBeans() {
			synchronized(DrinkingfactoryStatemachine.this) {
				putBeans = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPutBeansRaised();
				}
			}
		}
		
		private boolean checkPayment;
		
		
		public boolean isRaisedCheckPayment() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return checkPayment;
			}
		}
		
		protected void raiseCheckPayment() {
			synchronized(DrinkingfactoryStatemachine.this) {
				checkPayment = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCheckPaymentRaised();
				}
			}
		}
		
		private long drinkNum;
		
		public synchronized long getDrinkNum() {
			synchronized(DrinkingfactoryStatemachine.this) {
				return drinkNum;
			}
		}
		
		public void setDrinkNum(long value) {
			synchronized(DrinkingfactoryStatemachine.this) {
				this.drinkNum = value;
			}
		}
		
		protected void clearEvents() {
			drinkSelected = false;
			addMoney = false;
			paying = false;
			paymentValidate = false;
			resetMachine = false;
			userAction = false;
			cupGrabbed = false;
			heatReached = false;
			cupFilled = false;
		}
		protected void clearOutEvents() {
		
		doResetMoney = false;
		doResetDrinkSetting = false;
		doResetMachine = false;
		doCleaning = false;
		grindBeans = false;
		takeTeaBag = false;
		takeOffTeaBag = false;
		takeCoffeePod = false;
		heatWater = false;
		putCup = false;
		addSugar = false;
		pourWater = false;
		getDrink = false;
		putBeans = false;
		checkPayment = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		drink_management_Standby,
		drink_management_Cleaning,
		drink_management_checkingPayment,
		drink_management_Preparation,
		drink_management_Preparation_r1_step1,
		drink_management_Preparation_r1_step1_r1_Expresso,
		drink_management_Preparation_r1_step1_r1__final_,
		drink_management_Preparation_r1_step1_r1_Tea,
		drink_management_Preparation_r1_step1_r1_Coffee,
		drink_management_Preparation_r1_step1_r1_entry,
		drink_management_Preparation_r1_step1_r2_General,
		drink_management_Preparation_r1_step1_r2__final_,
		drink_management_Preparation_r1_step2,
		drink_management_Preparation_r1_step2_r1__final_,
		drink_management_Preparation_r1_step2_r1_Expresso,
		drink_management_Preparation_r1_step2_r1_entry,
		drink_management_Preparation_r1_step2_r2_General,
		drink_management_Preparation_r1_step2_r2__final_,
		drink_management_Preparation_r1_step3,
		drink_management_Preparation_r1_step3_r1_Tea,
		drink_management_Preparation_r1_step3_r1__final_,
		drink_management_Preparation_r1_step3_r1_entry,
		drink_management_Preparation_r1_step3_r2_General,
		drink_management_Preparation_r1_step3_r2__final_,
		payment_management_Payment,
		activity_management_configuration,
		$NullState$
	};
	
	private final State[] stateVector = new State[4];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[4];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	private boolean resetMachineInternal;
	private boolean userActionInternal;
	public DrinkingfactoryStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setDrinkNum(0);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_drink_management_default();
		enterSequence_payment_management_default();
		enterSequence_activity_management_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case drink_management_Standby:
				drink_management_Standby_react(true);
				break;
			case drink_management_Cleaning:
				drink_management_Cleaning_react(true);
				break;
			case drink_management_checkingPayment:
				drink_management_checkingPayment_react(true);
				break;
			case drink_management_Preparation_r1_step1_r1_Expresso:
				drink_management_Preparation_r1_step1_r1_Expresso_react(true);
				break;
			case drink_management_Preparation_r1_step1_r1__final_:
				drink_management_Preparation_r1_step1_r1__final__react(true);
				break;
			case drink_management_Preparation_r1_step1_r1_Tea:
				drink_management_Preparation_r1_step1_r1_Tea_react(true);
				break;
			case drink_management_Preparation_r1_step1_r1_Coffee:
				drink_management_Preparation_r1_step1_r1_Coffee_react(true);
				break;
			case drink_management_Preparation_r1_step1_r1_entry:
				drink_management_Preparation_r1_step1_r1_entry_react(true);
				break;
			case drink_management_Preparation_r1_step1_r2_General:
				drink_management_Preparation_r1_step1_r2_General_react(true);
				break;
			case drink_management_Preparation_r1_step1_r2__final_:
				drink_management_Preparation_r1_step1_r2__final__react(true);
				break;
			case drink_management_Preparation_r1_step2_r1__final_:
				drink_management_Preparation_r1_step2_r1__final__react(true);
				break;
			case drink_management_Preparation_r1_step2_r1_Expresso:
				drink_management_Preparation_r1_step2_r1_Expresso_react(true);
				break;
			case drink_management_Preparation_r1_step2_r1_entry:
				drink_management_Preparation_r1_step2_r1_entry_react(true);
				break;
			case drink_management_Preparation_r1_step2_r2_General:
				drink_management_Preparation_r1_step2_r2_General_react(true);
				break;
			case drink_management_Preparation_r1_step2_r2__final_:
				drink_management_Preparation_r1_step2_r2__final__react(true);
				break;
			case drink_management_Preparation_r1_step3_r1_Tea:
				drink_management_Preparation_r1_step3_r1_Tea_react(true);
				break;
			case drink_management_Preparation_r1_step3_r1__final_:
				drink_management_Preparation_r1_step3_r1__final__react(true);
				break;
			case drink_management_Preparation_r1_step3_r1_entry:
				drink_management_Preparation_r1_step3_r1_entry_react(true);
				break;
			case drink_management_Preparation_r1_step3_r2_General:
				drink_management_Preparation_r1_step3_r2_General_react(true);
				break;
			case drink_management_Preparation_r1_step3_r2__final_:
				drink_management_Preparation_r1_step3_r2__final__react(true);
				break;
			case payment_management_Payment:
				payment_management_Payment_react(true);
				break;
			case activity_management_configuration:
				activity_management_configuration_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!internalEventQueue.isEmpty()) {
			return internalEventQueue.poll();
		}
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_drink_management();
		exitSequence_payment_management();
		exitSequence_activity_management();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$||stateVector[3] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		resetMachineInternal = false;
		userActionInternal = false;
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case drink_management_Standby:
			return stateVector[0] == State.drink_management_Standby;
		case drink_management_Cleaning:
			return stateVector[0] == State.drink_management_Cleaning;
		case drink_management_checkingPayment:
			return stateVector[0] == State.drink_management_checkingPayment;
		case drink_management_Preparation:
			return stateVector[0].ordinal() >= State.
					drink_management_Preparation.ordinal()&& stateVector[0].ordinal() <= State.drink_management_Preparation_r1_step3_r2__final_.ordinal();
		case drink_management_Preparation_r1_step1:
			return stateVector[0].ordinal() >= State.
					drink_management_Preparation_r1_step1.ordinal()&& stateVector[0].ordinal() <= State.drink_management_Preparation_r1_step1_r2__final_.ordinal();
		case drink_management_Preparation_r1_step1_r1_Expresso:
			return stateVector[0] == State.drink_management_Preparation_r1_step1_r1_Expresso;
		case drink_management_Preparation_r1_step1_r1__final_:
			return stateVector[0] == State.drink_management_Preparation_r1_step1_r1__final_;
		case drink_management_Preparation_r1_step1_r1_Tea:
			return stateVector[0] == State.drink_management_Preparation_r1_step1_r1_Tea;
		case drink_management_Preparation_r1_step1_r1_Coffee:
			return stateVector[0] == State.drink_management_Preparation_r1_step1_r1_Coffee;
		case drink_management_Preparation_r1_step1_r1_entry:
			return stateVector[0] == State.drink_management_Preparation_r1_step1_r1_entry;
		case drink_management_Preparation_r1_step1_r2_General:
			return stateVector[1] == State.drink_management_Preparation_r1_step1_r2_General;
		case drink_management_Preparation_r1_step1_r2__final_:
			return stateVector[1] == State.drink_management_Preparation_r1_step1_r2__final_;
		case drink_management_Preparation_r1_step2:
			return stateVector[0].ordinal() >= State.
					drink_management_Preparation_r1_step2.ordinal()&& stateVector[0].ordinal() <= State.drink_management_Preparation_r1_step2_r2__final_.ordinal();
		case drink_management_Preparation_r1_step2_r1__final_:
			return stateVector[0] == State.drink_management_Preparation_r1_step2_r1__final_;
		case drink_management_Preparation_r1_step2_r1_Expresso:
			return stateVector[0] == State.drink_management_Preparation_r1_step2_r1_Expresso;
		case drink_management_Preparation_r1_step2_r1_entry:
			return stateVector[0] == State.drink_management_Preparation_r1_step2_r1_entry;
		case drink_management_Preparation_r1_step2_r2_General:
			return stateVector[1] == State.drink_management_Preparation_r1_step2_r2_General;
		case drink_management_Preparation_r1_step2_r2__final_:
			return stateVector[1] == State.drink_management_Preparation_r1_step2_r2__final_;
		case drink_management_Preparation_r1_step3:
			return stateVector[0].ordinal() >= State.
					drink_management_Preparation_r1_step3.ordinal()&& stateVector[0].ordinal() <= State.drink_management_Preparation_r1_step3_r2__final_.ordinal();
		case drink_management_Preparation_r1_step3_r1_Tea:
			return stateVector[0] == State.drink_management_Preparation_r1_step3_r1_Tea;
		case drink_management_Preparation_r1_step3_r1__final_:
			return stateVector[0] == State.drink_management_Preparation_r1_step3_r1__final_;
		case drink_management_Preparation_r1_step3_r1_entry:
			return stateVector[0] == State.drink_management_Preparation_r1_step3_r1_entry;
		case drink_management_Preparation_r1_step3_r2_General:
			return stateVector[1] == State.drink_management_Preparation_r1_step3_r2_General;
		case drink_management_Preparation_r1_step3_r2__final_:
			return stateVector[1] == State.drink_management_Preparation_r1_step3_r2__final_;
		case payment_management_Payment:
			return stateVector[2] == State.payment_management_Payment;
		case activity_management_configuration:
			return stateVector[3] == State.activity_management_configuration;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	private void raiseResetMachineInternal() {
	
		internalEventQueue.add( new Runnable() {
			@Override public void run() {
				resetMachineInternal = true;					
				singleCycle();
			}
		});
	}
	
	private void raiseUserActionInternal() {
	
		internalEventQueue.add( new Runnable() {
			@Override public void run() {
				userActionInternal = true;					
				singleCycle();
			}
		});
	}
	
	public synchronized void raiseDrinkSelected() {
		sCInterface.raiseDrinkSelected();
	}
	
	public synchronized void raiseAddMoney() {
		sCInterface.raiseAddMoney();
	}
	
	public synchronized void raisePaying() {
		sCInterface.raisePaying();
	}
	
	public synchronized void raisePaymentValidate() {
		sCInterface.raisePaymentValidate();
	}
	
	public synchronized void raiseResetMachine() {
		sCInterface.raiseResetMachine();
	}
	
	public synchronized void raiseUserAction() {
		sCInterface.raiseUserAction();
	}
	
	public synchronized void raiseCupGrabbed() {
		sCInterface.raiseCupGrabbed();
	}
	
	public synchronized void raiseHeatReached() {
		sCInterface.raiseHeatReached();
	}
	
	public synchronized void raiseCupFilled() {
		sCInterface.raiseCupFilled();
	}
	
	public synchronized boolean isRaisedDoResetMoney() {
		return sCInterface.isRaisedDoResetMoney();
	}
	
	public synchronized boolean isRaisedDoResetDrinkSetting() {
		return sCInterface.isRaisedDoResetDrinkSetting();
	}
	
	public synchronized boolean isRaisedDoResetMachine() {
		return sCInterface.isRaisedDoResetMachine();
	}
	
	public synchronized boolean isRaisedDoCleaning() {
		return sCInterface.isRaisedDoCleaning();
	}
	
	public synchronized boolean isRaisedGrindBeans() {
		return sCInterface.isRaisedGrindBeans();
	}
	
	public synchronized boolean isRaisedTakeTeaBag() {
		return sCInterface.isRaisedTakeTeaBag();
	}
	
	public synchronized boolean isRaisedTakeOffTeaBag() {
		return sCInterface.isRaisedTakeOffTeaBag();
	}
	
	public synchronized boolean isRaisedTakeCoffeePod() {
		return sCInterface.isRaisedTakeCoffeePod();
	}
	
	public synchronized boolean isRaisedHeatWater() {
		return sCInterface.isRaisedHeatWater();
	}
	
	public synchronized boolean isRaisedPutCup() {
		return sCInterface.isRaisedPutCup();
	}
	
	public synchronized boolean isRaisedAddSugar() {
		return sCInterface.isRaisedAddSugar();
	}
	
	public synchronized boolean isRaisedPourWater() {
		return sCInterface.isRaisedPourWater();
	}
	
	public synchronized boolean isRaisedGetDrink() {
		return sCInterface.isRaisedGetDrink();
	}
	
	public synchronized boolean isRaisedPutBeans() {
		return sCInterface.isRaisedPutBeans();
	}
	
	public synchronized boolean isRaisedCheckPayment() {
		return sCInterface.isRaisedCheckPayment();
	}
	
	public synchronized long getDrinkNum() {
		return sCInterface.getDrinkNum();
	}
	
	public synchronized void setDrinkNum(long value) {
		sCInterface.setDrinkNum(value);
	}
	
	/* Entry action for state 'Standby'. */
	private void entryAction_drink_management_Standby() {
		sCInterface.raiseDoResetMachine();
	}
	
	/* Entry action for state 'Cleaning'. */
	private void entryAction_drink_management_Cleaning() {
		timer.setTimer(this, 0, (10 * 1000), false);
	}
	
	/* Entry action for state 'checkingPayment'. */
	private void entryAction_drink_management_checkingPayment() {
		sCInterface.raiseCheckPayment();
	}
	
	/* Entry action for state 'Expresso'. */
	private void entryAction_drink_management_Preparation_r1_step1_r1_Expresso() {
		timer.setTimer(this, 1, (10 * 1000), false);
		
		sCInterface.raiseGrindBeans();
	}
	
	/* Entry action for state 'General'. */
	private void entryAction_drink_management_Preparation_r1_step1_r2_General() {
		sCInterface.raiseHeatWater();
	}
	
	/* Entry action for state 'General'. */
	private void entryAction_drink_management_Preparation_r1_step2_r2_General() {
		sCInterface.raisePutCup();
	}
	
	/* Entry action for state 'Tea'. */
	private void entryAction_drink_management_Preparation_r1_step3_r1_Tea() {
		timer.setTimer(this, 2, (60 * 1000), false);
	}
	
	/* Entry action for state 'General'. */
	private void entryAction_drink_management_Preparation_r1_step3_r2_General() {
		sCInterface.raisePourWater();
		
		sCInterface.raiseAddSugar();
	}
	
	/* Entry action for state 'Payment'. */
	private void entryAction_payment_management_Payment() {
		sCInterface.raiseCheckPayment();
		
		raiseUserActionInternal();
	}
	
	/* Entry action for state 'configuration'. */
	private void entryAction_activity_management_configuration() {
		timer.setTimer(this, 3, (45 * 1000), false);
	}
	
	/* Exit action for state 'Cleaning'. */
	private void exitAction_drink_management_Cleaning() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Expresso'. */
	private void exitAction_drink_management_Preparation_r1_step1_r1_Expresso() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Tea'. */
	private void exitAction_drink_management_Preparation_r1_step3_r1_Tea() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'configuration'. */
	private void exitAction_activity_management_configuration() {
		timer.unsetTimer(this, 3);
	}
	
	/* 'default' enter sequence for state Standby */
	private void enterSequence_drink_management_Standby_default() {
		entryAction_drink_management_Standby();
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Standby;
	}
	
	/* 'default' enter sequence for state Cleaning */
	private void enterSequence_drink_management_Cleaning_default() {
		entryAction_drink_management_Cleaning();
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Cleaning;
	}
	
	/* 'default' enter sequence for state checkingPayment */
	private void enterSequence_drink_management_checkingPayment_default() {
		entryAction_drink_management_checkingPayment();
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_checkingPayment;
	}
	
	/* 'default' enter sequence for state Preparation */
	private void enterSequence_drink_management_Preparation_default() {
		enterSequence_drink_management_Preparation_r1_default();
	}
	
	/* 'default' enter sequence for state step1 */
	private void enterSequence_drink_management_Preparation_r1_step1_default() {
		enterSequence_drink_management_Preparation_r1_step1_r1_default();
		enterSequence_drink_management_Preparation_r1_step1_r2_default();
	}
	
	/* 'default' enter sequence for state Expresso */
	private void enterSequence_drink_management_Preparation_r1_step1_r1_Expresso_default() {
		entryAction_drink_management_Preparation_r1_step1_r1_Expresso();
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Preparation_r1_step1_r1_Expresso;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_drink_management_Preparation_r1_step1_r1__final__default() {
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Preparation_r1_step1_r1__final_;
	}
	
	/* 'default' enter sequence for state Tea */
	private void enterSequence_drink_management_Preparation_r1_step1_r1_Tea_default() {
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Preparation_r1_step1_r1_Tea;
	}
	
	/* 'default' enter sequence for state Coffee */
	private void enterSequence_drink_management_Preparation_r1_step1_r1_Coffee_default() {
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Preparation_r1_step1_r1_Coffee;
	}
	
	/* 'default' enter sequence for state entry */
	private void enterSequence_drink_management_Preparation_r1_step1_r1_entry_default() {
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Preparation_r1_step1_r1_entry;
	}
	
	/* 'default' enter sequence for state General */
	private void enterSequence_drink_management_Preparation_r1_step1_r2_General_default() {
		entryAction_drink_management_Preparation_r1_step1_r2_General();
		nextStateIndex = 1;
		stateVector[1] = State.drink_management_Preparation_r1_step1_r2_General;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_drink_management_Preparation_r1_step1_r2__final__default() {
		nextStateIndex = 1;
		stateVector[1] = State.drink_management_Preparation_r1_step1_r2__final_;
	}
	
	/* 'default' enter sequence for state step2 */
	private void enterSequence_drink_management_Preparation_r1_step2_default() {
		enterSequence_drink_management_Preparation_r1_step2_r1_default();
		enterSequence_drink_management_Preparation_r1_step2_r2_default();
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_drink_management_Preparation_r1_step2_r1__final__default() {
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Preparation_r1_step2_r1__final_;
	}
	
	/* 'default' enter sequence for state Expresso */
	private void enterSequence_drink_management_Preparation_r1_step2_r1_Expresso_default() {
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Preparation_r1_step2_r1_Expresso;
	}
	
	/* 'default' enter sequence for state entry */
	private void enterSequence_drink_management_Preparation_r1_step2_r1_entry_default() {
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Preparation_r1_step2_r1_entry;
	}
	
	/* 'default' enter sequence for state General */
	private void enterSequence_drink_management_Preparation_r1_step2_r2_General_default() {
		entryAction_drink_management_Preparation_r1_step2_r2_General();
		nextStateIndex = 1;
		stateVector[1] = State.drink_management_Preparation_r1_step2_r2_General;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_drink_management_Preparation_r1_step2_r2__final__default() {
		nextStateIndex = 1;
		stateVector[1] = State.drink_management_Preparation_r1_step2_r2__final_;
	}
	
	/* 'default' enter sequence for state step3 */
	private void enterSequence_drink_management_Preparation_r1_step3_default() {
		enterSequence_drink_management_Preparation_r1_step3_r1_default();
		enterSequence_drink_management_Preparation_r1_step3_r2_default();
	}
	
	/* 'default' enter sequence for state Tea */
	private void enterSequence_drink_management_Preparation_r1_step3_r1_Tea_default() {
		entryAction_drink_management_Preparation_r1_step3_r1_Tea();
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Preparation_r1_step3_r1_Tea;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_drink_management_Preparation_r1_step3_r1__final__default() {
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Preparation_r1_step3_r1__final_;
	}
	
	/* 'default' enter sequence for state entry */
	private void enterSequence_drink_management_Preparation_r1_step3_r1_entry_default() {
		nextStateIndex = 0;
		stateVector[0] = State.drink_management_Preparation_r1_step3_r1_entry;
	}
	
	/* 'default' enter sequence for state General */
	private void enterSequence_drink_management_Preparation_r1_step3_r2_General_default() {
		entryAction_drink_management_Preparation_r1_step3_r2_General();
		nextStateIndex = 1;
		stateVector[1] = State.drink_management_Preparation_r1_step3_r2_General;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_drink_management_Preparation_r1_step3_r2__final__default() {
		nextStateIndex = 1;
		stateVector[1] = State.drink_management_Preparation_r1_step3_r2__final_;
	}
	
	/* 'default' enter sequence for state Payment */
	private void enterSequence_payment_management_Payment_default() {
		entryAction_payment_management_Payment();
		nextStateIndex = 2;
		stateVector[2] = State.payment_management_Payment;
	}
	
	/* 'default' enter sequence for state configuration */
	private void enterSequence_activity_management_configuration_default() {
		entryAction_activity_management_configuration();
		nextStateIndex = 3;
		stateVector[3] = State.activity_management_configuration;
	}
	
	/* 'default' enter sequence for region drink management */
	private void enterSequence_drink_management_default() {
		react_drink_management__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_drink_management_Preparation_r1_default() {
		react_drink_management_Preparation_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_drink_management_Preparation_r1_step1_r1_default() {
		react_drink_management_Preparation_r1_step1_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_drink_management_Preparation_r1_step1_r2_default() {
		react_drink_management_Preparation_r1_step1_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_drink_management_Preparation_r1_step2_r1_default() {
		react_drink_management_Preparation_r1_step2_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_drink_management_Preparation_r1_step2_r2_default() {
		react_drink_management_Preparation_r1_step2_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_drink_management_Preparation_r1_step3_r1_default() {
		react_drink_management_Preparation_r1_step3_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_drink_management_Preparation_r1_step3_r2_default() {
		react_drink_management_Preparation_r1_step3_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region payment management */
	private void enterSequence_payment_management_default() {
		react_payment_management__entry_Default();
	}
	
	/* 'default' enter sequence for region activity management */
	private void enterSequence_activity_management_default() {
		react_activity_management__entry_Default();
	}
	
	/* Default exit sequence for state Standby */
	private void exitSequence_drink_management_Standby() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Cleaning */
	private void exitSequence_drink_management_Cleaning() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_drink_management_Cleaning();
	}
	
	/* Default exit sequence for state checkingPayment */
	private void exitSequence_drink_management_checkingPayment() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Preparation */
	private void exitSequence_drink_management_Preparation() {
		exitSequence_drink_management_Preparation_r1();
	}
	
	/* Default exit sequence for state step1 */
	private void exitSequence_drink_management_Preparation_r1_step1() {
		exitSequence_drink_management_Preparation_r1_step1_r1();
		exitSequence_drink_management_Preparation_r1_step1_r2();
	}
	
	/* Default exit sequence for state Expresso */
	private void exitSequence_drink_management_Preparation_r1_step1_r1_Expresso() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_drink_management_Preparation_r1_step1_r1_Expresso();
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_drink_management_Preparation_r1_step1_r1__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Tea */
	private void exitSequence_drink_management_Preparation_r1_step1_r1_Tea() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Coffee */
	private void exitSequence_drink_management_Preparation_r1_step1_r1_Coffee() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state entry */
	private void exitSequence_drink_management_Preparation_r1_step1_r1_entry() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state General */
	private void exitSequence_drink_management_Preparation_r1_step1_r2_General() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_drink_management_Preparation_r1_step1_r2__final_() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state step2 */
	private void exitSequence_drink_management_Preparation_r1_step2() {
		exitSequence_drink_management_Preparation_r1_step2_r1();
		exitSequence_drink_management_Preparation_r1_step2_r2();
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_drink_management_Preparation_r1_step2_r1__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Expresso */
	private void exitSequence_drink_management_Preparation_r1_step2_r1_Expresso() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state entry */
	private void exitSequence_drink_management_Preparation_r1_step2_r1_entry() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state General */
	private void exitSequence_drink_management_Preparation_r1_step2_r2_General() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_drink_management_Preparation_r1_step2_r2__final_() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Tea */
	private void exitSequence_drink_management_Preparation_r1_step3_r1_Tea() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_drink_management_Preparation_r1_step3_r1_Tea();
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_drink_management_Preparation_r1_step3_r1__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state entry */
	private void exitSequence_drink_management_Preparation_r1_step3_r1_entry() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state General */
	private void exitSequence_drink_management_Preparation_r1_step3_r2_General() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_drink_management_Preparation_r1_step3_r2__final_() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Payment */
	private void exitSequence_payment_management_Payment() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state configuration */
	private void exitSequence_activity_management_configuration() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_activity_management_configuration();
	}
	
	/* Default exit sequence for region drink management */
	private void exitSequence_drink_management() {
		switch (stateVector[0]) {
		case drink_management_Standby:
			exitSequence_drink_management_Standby();
			break;
		case drink_management_Cleaning:
			exitSequence_drink_management_Cleaning();
			break;
		case drink_management_checkingPayment:
			exitSequence_drink_management_checkingPayment();
			break;
		case drink_management_Preparation_r1_step1_r1_Expresso:
			exitSequence_drink_management_Preparation_r1_step1_r1_Expresso();
			break;
		case drink_management_Preparation_r1_step1_r1__final_:
			exitSequence_drink_management_Preparation_r1_step1_r1__final_();
			break;
		case drink_management_Preparation_r1_step1_r1_Tea:
			exitSequence_drink_management_Preparation_r1_step1_r1_Tea();
			break;
		case drink_management_Preparation_r1_step1_r1_Coffee:
			exitSequence_drink_management_Preparation_r1_step1_r1_Coffee();
			break;
		case drink_management_Preparation_r1_step1_r1_entry:
			exitSequence_drink_management_Preparation_r1_step1_r1_entry();
			break;
		case drink_management_Preparation_r1_step2_r1__final_:
			exitSequence_drink_management_Preparation_r1_step2_r1__final_();
			break;
		case drink_management_Preparation_r1_step2_r1_Expresso:
			exitSequence_drink_management_Preparation_r1_step2_r1_Expresso();
			break;
		case drink_management_Preparation_r1_step2_r1_entry:
			exitSequence_drink_management_Preparation_r1_step2_r1_entry();
			break;
		case drink_management_Preparation_r1_step3_r1_Tea:
			exitSequence_drink_management_Preparation_r1_step3_r1_Tea();
			break;
		case drink_management_Preparation_r1_step3_r1__final_:
			exitSequence_drink_management_Preparation_r1_step3_r1__final_();
			break;
		case drink_management_Preparation_r1_step3_r1_entry:
			exitSequence_drink_management_Preparation_r1_step3_r1_entry();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case drink_management_Preparation_r1_step1_r2_General:
			exitSequence_drink_management_Preparation_r1_step1_r2_General();
			break;
		case drink_management_Preparation_r1_step1_r2__final_:
			exitSequence_drink_management_Preparation_r1_step1_r2__final_();
			break;
		case drink_management_Preparation_r1_step2_r2_General:
			exitSequence_drink_management_Preparation_r1_step2_r2_General();
			break;
		case drink_management_Preparation_r1_step2_r2__final_:
			exitSequence_drink_management_Preparation_r1_step2_r2__final_();
			break;
		case drink_management_Preparation_r1_step3_r2_General:
			exitSequence_drink_management_Preparation_r1_step3_r2_General();
			break;
		case drink_management_Preparation_r1_step3_r2__final_:
			exitSequence_drink_management_Preparation_r1_step3_r2__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_drink_management_Preparation_r1() {
		switch (stateVector[0]) {
		case drink_management_Preparation_r1_step1_r1_Expresso:
			exitSequence_drink_management_Preparation_r1_step1_r1_Expresso();
			break;
		case drink_management_Preparation_r1_step1_r1__final_:
			exitSequence_drink_management_Preparation_r1_step1_r1__final_();
			break;
		case drink_management_Preparation_r1_step1_r1_Tea:
			exitSequence_drink_management_Preparation_r1_step1_r1_Tea();
			break;
		case drink_management_Preparation_r1_step1_r1_Coffee:
			exitSequence_drink_management_Preparation_r1_step1_r1_Coffee();
			break;
		case drink_management_Preparation_r1_step1_r1_entry:
			exitSequence_drink_management_Preparation_r1_step1_r1_entry();
			break;
		case drink_management_Preparation_r1_step2_r1__final_:
			exitSequence_drink_management_Preparation_r1_step2_r1__final_();
			break;
		case drink_management_Preparation_r1_step2_r1_Expresso:
			exitSequence_drink_management_Preparation_r1_step2_r1_Expresso();
			break;
		case drink_management_Preparation_r1_step2_r1_entry:
			exitSequence_drink_management_Preparation_r1_step2_r1_entry();
			break;
		case drink_management_Preparation_r1_step3_r1_Tea:
			exitSequence_drink_management_Preparation_r1_step3_r1_Tea();
			break;
		case drink_management_Preparation_r1_step3_r1__final_:
			exitSequence_drink_management_Preparation_r1_step3_r1__final_();
			break;
		case drink_management_Preparation_r1_step3_r1_entry:
			exitSequence_drink_management_Preparation_r1_step3_r1_entry();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case drink_management_Preparation_r1_step1_r2_General:
			exitSequence_drink_management_Preparation_r1_step1_r2_General();
			break;
		case drink_management_Preparation_r1_step1_r2__final_:
			exitSequence_drink_management_Preparation_r1_step1_r2__final_();
			break;
		case drink_management_Preparation_r1_step2_r2_General:
			exitSequence_drink_management_Preparation_r1_step2_r2_General();
			break;
		case drink_management_Preparation_r1_step2_r2__final_:
			exitSequence_drink_management_Preparation_r1_step2_r2__final_();
			break;
		case drink_management_Preparation_r1_step3_r2_General:
			exitSequence_drink_management_Preparation_r1_step3_r2_General();
			break;
		case drink_management_Preparation_r1_step3_r2__final_:
			exitSequence_drink_management_Preparation_r1_step3_r2__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_drink_management_Preparation_r1_step1_r1() {
		switch (stateVector[0]) {
		case drink_management_Preparation_r1_step1_r1_Expresso:
			exitSequence_drink_management_Preparation_r1_step1_r1_Expresso();
			break;
		case drink_management_Preparation_r1_step1_r1__final_:
			exitSequence_drink_management_Preparation_r1_step1_r1__final_();
			break;
		case drink_management_Preparation_r1_step1_r1_Tea:
			exitSequence_drink_management_Preparation_r1_step1_r1_Tea();
			break;
		case drink_management_Preparation_r1_step1_r1_Coffee:
			exitSequence_drink_management_Preparation_r1_step1_r1_Coffee();
			break;
		case drink_management_Preparation_r1_step1_r1_entry:
			exitSequence_drink_management_Preparation_r1_step1_r1_entry();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_drink_management_Preparation_r1_step1_r2() {
		switch (stateVector[1]) {
		case drink_management_Preparation_r1_step1_r2_General:
			exitSequence_drink_management_Preparation_r1_step1_r2_General();
			break;
		case drink_management_Preparation_r1_step1_r2__final_:
			exitSequence_drink_management_Preparation_r1_step1_r2__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_drink_management_Preparation_r1_step2_r1() {
		switch (stateVector[0]) {
		case drink_management_Preparation_r1_step2_r1__final_:
			exitSequence_drink_management_Preparation_r1_step2_r1__final_();
			break;
		case drink_management_Preparation_r1_step2_r1_Expresso:
			exitSequence_drink_management_Preparation_r1_step2_r1_Expresso();
			break;
		case drink_management_Preparation_r1_step2_r1_entry:
			exitSequence_drink_management_Preparation_r1_step2_r1_entry();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_drink_management_Preparation_r1_step2_r2() {
		switch (stateVector[1]) {
		case drink_management_Preparation_r1_step2_r2_General:
			exitSequence_drink_management_Preparation_r1_step2_r2_General();
			break;
		case drink_management_Preparation_r1_step2_r2__final_:
			exitSequence_drink_management_Preparation_r1_step2_r2__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region payment management */
	private void exitSequence_payment_management() {
		switch (stateVector[2]) {
		case payment_management_Payment:
			exitSequence_payment_management_Payment();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region activity management */
	private void exitSequence_activity_management() {
		switch (stateVector[3]) {
		case activity_management_configuration:
			exitSequence_activity_management_configuration();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_drink_management__entry_Default() {
		enterSequence_drink_management_Standby_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_drink_management_Preparation_r1_step1_r1__entry_Default() {
		enterSequence_drink_management_Preparation_r1_step1_r1_entry_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_drink_management_Preparation_r1_step1_r2__entry_Default() {
		enterSequence_drink_management_Preparation_r1_step1_r2_General_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_drink_management_Preparation_r1__entry_Default() {
		enterSequence_drink_management_Preparation_r1_step1_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_drink_management_Preparation_r1_step2_r1__entry_Default() {
		enterSequence_drink_management_Preparation_r1_step2_r1_entry_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_drink_management_Preparation_r1_step2_r2__entry_Default() {
		enterSequence_drink_management_Preparation_r1_step2_r2_General_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_drink_management_Preparation_r1_step3_r1__entry_Default() {
		enterSequence_drink_management_Preparation_r1_step3_r1_entry_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_drink_management_Preparation_r1_step3_r2__entry_Default() {
		enterSequence_drink_management_Preparation_r1_step3_r2_General_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_payment_management__entry_Default() {
		enterSequence_payment_management_Payment_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_activity_management__entry_Default() {
		enterSequence_activity_management_configuration_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean drink_management_Standby_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.drinkSelected) {
				exitSequence_drink_management_Standby();
				enterSequence_drink_management_checkingPayment_default();
			} else {
				if (sCInterface.addMoney) {
					exitSequence_drink_management_Standby();
					enterSequence_drink_management_checkingPayment_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean drink_management_Cleaning_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_drink_management_Cleaning();
				enterSequence_drink_management_Standby_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean drink_management_checkingPayment_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.paymentValidate) {
				exitSequence_drink_management_checkingPayment();
				sCInterface.raiseDoResetMoney();
				
				enterSequence_drink_management_Preparation_default();
			} else {
				if (resetMachineInternal) {
					exitSequence_drink_management_checkingPayment();
					enterSequence_drink_management_Standby_default();
				} else {
					if (sCInterface.drinkSelected) {
						exitSequence_drink_management_checkingPayment();
						enterSequence_drink_management_checkingPayment_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cupGrabbed) {
				exitSequence_drink_management_Preparation();
				sCInterface.raiseDoCleaning();
				
				enterSequence_drink_management_Cleaning_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_drink_management_Preparation_r1_step1();
			enterSequence_drink_management_Preparation_r1_step2_default();
			drink_management_Preparation_react(false);
		}
		if (did_transition==false) {
			did_transition = drink_management_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step1_r1_Expresso_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_drink_management_Preparation_r1_step1_r1_Expresso();
				enterSequence_drink_management_Preparation_r1_step1_r1__final__default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step1_r1__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step1_r1_Tea_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_drink_management_Preparation_r1_step1_r1_Tea();
			sCInterface.raiseTakeTeaBag();
			
			enterSequence_drink_management_Preparation_r1_step1_r1__final__default();
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step1_r1_Coffee_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_drink_management_Preparation_r1_step1_r1_Coffee();
			sCInterface.raiseTakeCoffeePod();
			
			enterSequence_drink_management_Preparation_r1_step1_r1__final__default();
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step1_r1_entry_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.getDrinkNum()==2) {
				exitSequence_drink_management_Preparation_r1_step1_r1_entry();
				enterSequence_drink_management_Preparation_r1_step1_r1_Tea_default();
			} else {
				if (sCInterface.getDrinkNum()==3) {
					exitSequence_drink_management_Preparation_r1_step1_r1_entry();
					enterSequence_drink_management_Preparation_r1_step1_r1_Coffee_default();
				} else {
					if (sCInterface.getDrinkNum()==1) {
						exitSequence_drink_management_Preparation_r1_step1_r1_entry();
						enterSequence_drink_management_Preparation_r1_step1_r1_Expresso_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step1_r2_General_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.heatReached) {
				exitSequence_drink_management_Preparation_r1_step1_r2_General();
				enterSequence_drink_management_Preparation_r1_step1_r2__final__default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = drink_management_Preparation_r1_step1_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step1_r2__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = drink_management_Preparation_r1_step1_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_drink_management_Preparation_r1_step2();
			enterSequence_drink_management_Preparation_r1_step3_default();
			drink_management_Preparation_react(false);
		}
		if (did_transition==false) {
			did_transition = drink_management_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step2_r1__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step2_r1_Expresso_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_drink_management_Preparation_r1_step2_r1_Expresso();
			sCInterface.raisePutBeans();
			
			enterSequence_drink_management_Preparation_r1_step2_r1__final__default();
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step2_r1_entry_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.getDrinkNum()==2) {
				exitSequence_drink_management_Preparation_r1_step2_r1_entry();
				enterSequence_drink_management_Preparation_r1_step2_r1__final__default();
			} else {
				if (sCInterface.getDrinkNum()==1) {
					exitSequence_drink_management_Preparation_r1_step2_r1_entry();
					enterSequence_drink_management_Preparation_r1_step2_r1_Expresso_default();
				} else {
					if (sCInterface.getDrinkNum()==3) {
						exitSequence_drink_management_Preparation_r1_step2_r1_entry();
						enterSequence_drink_management_Preparation_r1_step2_r1__final__default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step2_r2_General_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_drink_management_Preparation_r1_step2_r2_General();
			enterSequence_drink_management_Preparation_r1_step2_r2__final__default();
		}
		if (did_transition==false) {
			did_transition = drink_management_Preparation_r1_step2_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step2_r2__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = drink_management_Preparation_r1_step2_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step3_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = drink_management_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step3_r1_Tea_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_drink_management_Preparation_r1_step3_r1_Tea();
				sCInterface.raiseTakeOffTeaBag();
				
				enterSequence_drink_management_Preparation_r1_step3_r1__final__default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step3_r1__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step3_r1_entry_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.getDrinkNum()==2 && sCInterface.cupFilled)) {
				exitSequence_drink_management_Preparation_r1_step3_r1_entry();
				enterSequence_drink_management_Preparation_r1_step3_r1_Tea_default();
			} else {
				if (sCInterface.getDrinkNum()==1) {
					exitSequence_drink_management_Preparation_r1_step3_r1_entry();
					enterSequence_drink_management_Preparation_r1_step3_r1__final__default();
				} else {
					if (sCInterface.getDrinkNum()==3) {
						exitSequence_drink_management_Preparation_r1_step3_r1_entry();
						enterSequence_drink_management_Preparation_r1_step3_r1__final__default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step3_r2_General_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cupFilled) {
				exitSequence_drink_management_Preparation_r1_step3_r2_General();
				enterSequence_drink_management_Preparation_r1_step3_r2__final__default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = drink_management_Preparation_r1_step3_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean drink_management_Preparation_r1_step3_r2__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = drink_management_Preparation_r1_step3_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean payment_management_Payment_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.addMoney) {
				exitSequence_payment_management_Payment();
				enterSequence_payment_management_Payment_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean activity_management_configuration_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_activity_management_configuration();
				raiseResetMachineInternal();
				
				enterSequence_activity_management_configuration_default();
				react();
			} else {
				if (sCInterface.userAction) {
					exitSequence_activity_management_configuration();
					enterSequence_activity_management_configuration_default();
					react();
				} else {
					if (userActionInternal) {
						exitSequence_activity_management_configuration();
						enterSequence_activity_management_configuration_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
